{"version":3,"file":"component---src-templates-index-tsx-2e954eadb6d0559fe0a7.js","mappings":"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","sources":["webpack://twicefire/./src/components/Pagination.tsx","webpack://twicefire/./src/templates/index.tsx"],"sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/react';\n\nimport { colors } from '../styles/colors';\n\nexport type PaginationProps = {\n  currentPage: number;\n  numPages: number;\n};\n\nfunction Pagination({ currentPage, numPages }: PaginationProps) {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : `../${(currentPage - 1).toString()}`;\n  const nextPage = `../${(currentPage + 1).toString()}`;\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            className={i + 1 === currentPage ? 'active' : ''}\n            to={`/${i === 0 ? '' : i + 1}`}\n          >\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n}\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell;\n    background: #fff;\n    color: black;\n    float: left;\n    padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color 0.3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 50px;\n\n    &.active {\n      -webkit-box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow: inset 3px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport default Pagination;\n","import { graphql } from 'gatsby';\nimport { getSrc, getImage } from 'gatsby-plugin-image';\nimport React from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport { css } from '@emotion/react';\n\nimport { Footer } from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport Pagination from '../components/Pagination';\nimport { PostCard } from '../components/PostCard';\nimport { Wrapper } from '../components/Wrapper';\nimport favicon16 from '../content/img/favicon-16x16.png';\nimport favicon32 from '../content/img/favicon-32x32.png';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  Posts,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n  SiteHeaderStyles,\n} from '../styles/shared';\nimport config from '../website-config';\nimport type { PageContext } from './post';\n\nexport type IndexProps = {\n  children: React.ReactNode;\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    logo: any;\n    header: any;\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n};\n\nfunction IndexPage(props: IndexProps) {\n  const width = getImage(props.data.header)?.width;\n  const height = getImage(props.data.header)?.height;\n\n  return (\n    <IndexLayout css={HomePosts}>\n      <link rel='icon' type='image/png' sizes=\"16x16\" href={`${favicon16}`}/>\n      <link rel='icon' type='image/png' sizes=\"32x32\" href={`${favicon32}`}/>\n      <Helmet>\n        <html lang={config.lang} />\n        <title>{config.title}</title>\n        <meta name=\"description\" content={config.description} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={config.title} />\n        <meta property=\"og:description\" content={config.description} />\n        <meta property=\"og:url\" content={config.siteUrl} />\n        <meta property=\"og:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {/* {config.googleSiteVerification && (\n          <meta name=\"google-site-verification\" content={config.googleSiteVerification} />\n        )} */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={config.title} />\n        <meta name=\"twitter:description\" content={config.description} />\n        <meta name=\"twitter:url\" content={config.siteUrl} />\n        <meta name=\"twitter:image\" content={`${config.siteUrl}${getSrc(props.data.header)}`} />\n        {config.twitter && (\n          <meta\n            name=\"twitter:site\"\n            content={`@${config.twitter.split('https://twitter.com/')[1]}`}\n          />\n        )}\n        <meta property=\"og:image:width\" content={width?.toString()} />\n        <meta property=\"og:image:height\" content={height?.toString()} />\n      </Helmet>\n      <Wrapper>\n        <div\n          css={[outer, SiteHeader, SiteHeaderStyles]}\n          className=\"site-header-background\"\n          style={{\n            backgroundImage: `url('${getSrc(props.data.header)}')`,\n          }}\n        >\n          <div css={inner}>\n            <SiteNav isHome />\n            <SiteHeaderContent className=\"site-header-content\">\n              <SiteTitle className=\"site-title\">\n                {props.data.logo ? (\n                  <img\n                    style={{ maxHeight: '55px', height: '55px' }}\n                    src={getSrc(props.data.logo)}\n                    alt={config.title}\n                  />\n                ) : (\n                  config.title\n                )}\n              </SiteTitle>\n              <SiteDescription>{config.description}</SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </div>\n        <main id=\"site-main\" css={[SiteMain, outer]}>\n          <div css={[inner, Posts]}>\n            <div css={[PostFeed]}>\n              {props.data.allMarkdownRemark.edges.map(\n                (post, index) =>\n                  // filter out drafts in production\n                  (post.node.frontmatter.draft !== true ||\n                    process.env.NODE_ENV !== 'production') && (\n                    <PostCard key={post.node.fields.slug} post={post.node} isLarge={index === 0} />\n                  ),\n              )}\n            </div>\n          </div>\n        </main>\n        {props.children}\n        {props.pageContext.numPages > 1 && (\n          <Pagination\n            currentPage={props.pageContext.currentPage}\n            numPages={props.pageContext.numPages}\n          />\n        )}\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n}\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    logo: file(relativePath: { eq: \"img/title-logo.png\" }) {\n      childImageSharp {\n        gatsbyImageData(layout: FIXED)\n      }\n    }\n    header: file(relativePath: { eq: \"img/s.jpg\" }) {\n      childImageSharp {\n        gatsbyImageData(width: 2000, quality: 100, layout: FIXED, formats: [AUTO, WEBP, AVIF])\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC} }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date\n            tags\n            draft\n            excerpt\n            image {\n              childImageSharp {\n                gatsbyImageData(layout: FULL_WIDTH, formats: [AUTO, WEBP, AVIF])\n              }\n            }\n            author {\n              name\n              bio\n              avatar {\n                childImageSharp {\n                  gatsbyImageData(layout: FULL_WIDTH, breakpoints: [40, 80, 120])\n                }\n              }\n            }\n          }\n          excerpt\n          fields {\n            readingTime {\n              text\n            }\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst HomePosts = css`\n  @media (min-width: 795px) {\n    .post-card-large {\n      flex: 1 1 100%;\n      flex-direction: row;\n      padding-bottom: 40px;\n      min-height: 280px;\n      border-top: 0;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large:not(.no-image) .post-card-header {\n      margin-top: 0;\n    }\n\n    .post-card-large .post-card-image-link {\n      position: relative;\n      flex: 1 1 auto;\n      margin-bottom: 0;\n      min-height: 380px;\n    }\n\n    .post-card-large .post-card-image {\n      position: absolute;\n      width: 100%;\n      height: 100%;\n    }\n\n    .post-card-large .post-card-content {\n      flex: 0 1 361px;\n      justify-content: center;\n    }\n\n    .post-card-large .post-card-title {\n      margin-top: 0;\n      font-size: 3.2rem;\n    }\n\n    .post-card-large .post-card-content-link {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-meta {\n      padding: 0 0 0 40px;\n    }\n\n    .post-card-large .post-card-excerpt p {\n      margin-bottom: 1.5em;\n      font-size: 1.8rem;\n      line-height: 1.5em;\n    }\n  }\n`;\n\nexport default IndexPage;\n"],"names":["navCss","css","darken","colors","darkgrey","_ref","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","___EmotionJSX","Link","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","HomePosts","name","styles","props","_getImage","_getImage2","width","getImage","data","header","height","IndexLayout","type","sizes","href","favicon16","Helmet","lang","config","title","content","description","property","siteUrl","getSrc","twitter","split","Wrapper","outer","SiteHeader","SiteHeaderStyles","style","backgroundImage","inner","SiteNav","isHome","SiteHeaderContent","SiteTitle","logo","maxHeight","src","alt","SiteDescription","id","SiteMain","Posts","PostFeed","allMarkdownRemark","edges","map","post","index","node","frontmatter","draft","PostCard","fields","slug","isLarge","children","pageContext","Pagination","Footer"],"sourceRoot":""}